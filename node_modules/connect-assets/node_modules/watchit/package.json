{
  "author": {
    "name": "Trevor Burnham",
    "url": "http://trevorburnham.com"
  },
  "name": "watchit",
  "description": "A sensible wrapper around fs.watch",
  "version": "0.0.4",
  "engines": {
    "node": ">=0.8.0"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha"
  },
  "homepage": "http://github.com/TrevorBurnham/Watchit",
  "repository": {
    "type": "git",
    "url": "git://github.com/TrevorBurnham/Watchit.git"
  },
  "main": "lib/watchit.js",
  "devDependencies": {
    "coffee-script": "1.1.3",
    "watchit": "0.0.2",
    "mocha": "1.3.0",
    "expect.js": "0.1.2"
  },
  "readme": "# Watchit\n\nA sensible wrapper around [fs.watch](http://nodejs.org/docs/latest/api/fs.html#fs.watch).\n\nWritten in CoffeeScript by the author of *[CoffeeScript: Accelerated JavaScript Development](http://pragprog.com/book/tbcoffee/coffeescript)*.\n\n## Usage\n\nInstall with [npm](http://npmjs.org/). Then:\n\n    watchit = require('watchit');\n    watchit('target', options, callback);\n\nwhere `target` is the path to a file or directory, `options` is a hash (see\nbelow) and `callback` is a function of the form\n\n    callback = function(event) { ... }\n\nBoth `options` and `callback` are optional.\n\n`watchit` also returns an `EventEmitter` that emits the same events received\nby `callback` (more on that below). You can also call `close()` on the emitter\nto \"unwatch\" the target.\n\n## Options\n\n`watchit` is designed to work as a drop-in replacement for `fs.watch` by\ndefault, but in most cases you'll want to modify one or more of these options:\n\n* `retain` (default: **false**) means that if something is later created at\nthe same location as the target, the new entity will be watched.\n* `debounce` (default: **false**) means that changes that occur within 1\nsecond of each other will be treated as a single change. This also allows\n\"echo\" events that occur under OS X to be ignored.\n* `include` (default: **false**) means that if the target is a directory,\nfiles contained in that directory will be treated like targets. (Otherwise,\ndirectory events will be forwarded directly from `fs.watch`.)\n* `recurse` (default: **false**) means that if the target is a directory, all\nof its subdirectories will also be counted as targets.\n* `persistent` is identical to `fs.watch`'s `persistent` option. If\ndisabled, the process may exit while files are still being watched.\n\n## The emitter\n\nThe emitter returned by `watchit` emits events in two ways:\n\n1. **fs.watch-style**: Bind a callback that takes the event name, filename,\nand possibly other args with `emitter.on('all', callback)`. (**Note**: With\n`fs.watch`, this would be `emitter.on 'change'`. Unfortunately, `'change'` is\nalso one of the two event names that `fs.watch` can return; to avoid\nconfusion, Watchit uses the `'all'` convention from\n[Backbone.js](http://documentcloud.github.com/backbone/#Events).)\n1. **By event**: Bind a callback that takes the filename, and possibly other\nargs, to a specific event: `'change'`, `'create'` or `'unlink'`. For example,\n`emitter.on('change', callback)`.\n\n## Major differences vs. `fs.watch`\n\nWith Watchit:\n\n1. Duplicate changes (those that do not modify `mtime`) are ignored; this\nworks around a notable `fs.watch` bug under OS X.\n1. After a file is renamed, it will no longer emit events. That is, Watchit\ndoes not \"follow\" moved files the way `fs.watch` does. (Why? Because this\nbehavior is inconsistent across OSes, and there's currently no way to\ndetermine the new location of the file.)\n1. Emitted events differ (see below)\n\n## Events\n\n* `'success'`/`'failure'`: When a target is first watched, a `'success'` event will be emitted if it already exists, and `failure` if it does not exist.\n(`'failure'` is not emitted if the `retain` option is set.)\n* `'change'`: Same as `fs.watch`'s `'change'`.\n* `'create'`: Emitted when the target is created (or, in `include` mode, when\na child of the target directory is created).\n* `'unlink'`: Emitted when the target no longer exists at its current location\n(or, in `include` mode, when a child of the target directory no long exists).\n\nNote that `create` and `unlink` are finer-grained versions of `fs.watch`'s\n`rename`.\n\n## A word of warning\n\nThe Node team is, as of version 0.6.2, still working the kinks out of\n`fs.watch`. Watchit should be considered a good alternative to dealing with\n`fs.watch` yourself, but you may nonetheless encounter some quirks--and even\nfatal errors. Check the issue tracker:\n\nhttps://github.com/joyent/node/issues/search?q=fs.watch&state=open\n\nIn addition, watchit itself is a new project, and the test suites are\nincomplete. If you run into any problems that you can replicate in a small\ntest case, please don't hesitate to report them.\n\n## Contributing\n\n* Install dependencies with `npm install`\n* Make changes in `src`\n* Build with `cake build`\n* Add tests under `test`\n* Run tests via `npm test`\n\n## License\n\nhttp://trevorburnham.mit-license.org",
  "readmeFilename": "README.mdown",
  "_id": "watchit@0.0.4",
  "dist": {
    "shasum": "b08e48ea824f2efe53f190e39655cbcce0702f4f"
  },
  "_from": "watchit@0.0.4"
}
